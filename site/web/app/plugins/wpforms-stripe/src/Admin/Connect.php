<?php

namespace WPFormsStripe\Admin;

use WPFormsStripe\Helpers;

/**
 * Stripe Connect functionality.
 *
 * @since 2.3.0
 */
class Connect {

	/**
	 * WPForms website URL.
	 *
	 * @since 2.3.0
	 */
	const WPFORMS_URL = 'https://wpforms.com';

	/**
	 * Stripe live/test account objects.
	 *
	 * @since 2.3.0
	 *
	 * @var array
	 */
	protected $accounts;

	/**
	 * Constructor.
	 *
	 * @since 2.3.0
	 */
	public function __construct() {

		\add_action( 'admin_init', array( $this, 'handle_oauth_handshake' ) );
	}

	/**
	 * Handle Stripe Connect OAuth handshake and save Stripe keys.
	 *
	 * @since 2.3.0
	 */
	public function handle_oauth_handshake() {

		if ( ! \wpforms_current_user_can() ) {
			return;
		}

		if ( ! isset( $_GET['stripe_connect'] ) || 'complete' !== $_GET['stripe_connect'] ) { // phpcs:ignore WordPress.Security.NonceVerification.Recommended
			return;
		}

		$state = isset( $_GET['state'] ) ? \sanitize_text_field( \wp_unslash( $_GET['state'] ) ) : ''; // phpcs:ignore WordPress.Security.NonceVerification.Recommended

		if ( empty( $state ) ) {
			return;
		}

		$credentials = $this->fetch_stripe_credentials( $state );

		$required_keys = array( 'stripe_user_id', 'stripe_publishable_key', 'access_token', 'refresh_token', 'live_mode' );

		if ( 0 !== \count( \array_diff( $required_keys, \array_keys( $credentials ) ) ) ) {
			return;
		}

		$mode = empty( $credentials['live_mode'] ) ? 'test' : 'live';

		$this->set_connected_user_id( $credentials['stripe_user_id'], $mode );
		$this->set_connected_refresh_token( $credentials['refresh_token'], $mode );

		Helpers::set_stripe_key( $credentials['stripe_publishable_key'], 'publishable', $mode );
		Helpers::set_stripe_key( $credentials['access_token'], 'secret', $mode );

		\wp_safe_redirect( 'admin.php?page=wpforms-settings&view=payments' );
		exit;
	}

	/**
	 * Fetch Stripe credentials from https://wpforms.com.
	 *
	 * @since 2.3.0
	 *
	 * @param string $state Anonymous autogenerated ID to safely fetch Stripe credentials.
	 *
	 * @return array|mixed|object
	 */
	protected function fetch_stripe_credentials( $state ) {

		$response = \wp_remote_post(
			self::WPFORMS_URL . '/oauth/stripe-connect',
			array(
				'body' => array(
					'action' => 'credentials',
					'state'  => $state,
				),
			)
		);

		if ( \is_wp_error( $response ) ) {
			return array();
		}

		$body = \json_decode( \wp_remote_retrieve_body( $response ), true );

		return \is_array( $body ) ? $body : array();
	}

	/**
	 * Get saved Stripe Connect user id from DB.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return string
	 */
	public function get_connected_user_id( $mode = '' ) {

		$mode    = Helpers::validate_stripe_mode( $mode );
		$user_id = \get_option( "wpforms_stripe_{$mode}_connect_user_id", '' );

		return (string) \apply_filters( 'wpforms_stripe_admin_connect_get_connected_user_id', $user_id );
	}

	/**
	 * Save connected user id to an option.
	 *
	 * @since 2.3.0
	 *
	 * @param string $user_id User id to set.
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return bool
	 */
	protected function set_connected_user_id( $user_id, $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		return \update_option( "wpforms_stripe_{$mode}_connect_user_id", \sanitize_text_field( $user_id ) );
	}

	/**
	 * Get connected account refresh token from DB.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return string
	 */
	public function get_connected_refresh_token( $mode = '' ) {

		$mode    = Helpers::validate_stripe_mode( $mode );
		$user_id = \get_option( "wpforms_stripe_{$mode}_connect_refresh_token", '' );

		return (string) \apply_filters( 'wpforms_stripe_admin_connect_get_connected_refresh_token', $user_id );
	}

	/**
	 * Save connected account refresh token to an option.
	 *
	 * @since 2.3.0
	 *
	 * @param string $token Refresh token to set.
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return bool
	 */
	protected function set_connected_refresh_token( $token, $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		return \update_option( "wpforms_stripe_{$mode}_connect_refresh_token", \sanitize_text_field( $token ) );
	}

	/**
	 * Fetch Stripe Account from Stripe.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return \Stripe\Account|null
	 */
	protected function fetch_stripe_account( $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		$api_key = Helpers::get_stripe_key( 'secret', $mode );

		if ( ! $api_key ) {
			return null;
		}

		try {
			$account = \Stripe\Account::retrieve( null, \sanitize_text_field( $api_key ) );
		} catch ( \Exception $e ) {
			$account = null;
		}

		return $account;
	}

	/**
	 * Set fetched Stripe Account for caching purposes.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 */
	protected function set_connected_account( $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		$this->accounts[ $mode ] = null;

		$user_id = $this->get_connected_user_id( $mode );

		if ( ! $user_id ) {
			return;
		}

		$account = $this->fetch_stripe_account( $mode );

		if ( isset( $account->id ) && $account->id === $user_id ) {
			$this->accounts[ $mode ] = $account;
		}
	}

	/**
	 * Get cached Stripe Account or fetch it from Stripe.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return \Stripe\Account|null
	 */
	public function get_connected_account( $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		if ( empty( $this->accounts ) || ( \is_array( $this->accounts ) && ! \array_key_exists( $mode, $this->accounts ) ) ) {
			$this->set_connected_account( $mode );
		}

		return ! empty( $this->accounts[ $mode ] ) ? $this->accounts[ $mode ] : null;
	}

	/**
	 * Get Stripe Account name.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return string
	 */
	public function get_connected_account_name( $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		$account = $this->get_connected_account( $mode );

		if ( isset( $account->display_name ) ) {
			return $account->display_name;
		}

		// Separate isset( $account->settings ) is needed to prevent Stripe
		// from firing an "Undefined property of Stripe\Account" PHP notice.
		if ( isset( $account->settings ) && isset( $account->settings->dashboard->display_name ) ) {
			return $account->settings->dashboard->display_name;
		}

		return '';
	}

	/**
	 * Generate random alphanumeric token string.
	 * Token length is always 32 chars.
	 *
	 * @since 2.3.0
	 *
	 * @return string
	 */
	public function generate_random_token() {

		$random        = false;
		$crypto_strong = false;

		if ( \function_exists( 'openssl_random_pseudo_bytes' ) ) {
			$random = \openssl_random_pseudo_bytes( 16, $crypto_strong );
		}

		return ( false === $crypto_strong || false === $random ) ? \md5( \wp_rand() ) : \bin2hex( $random );
	}

	/**
	 * Get Stripe Connect button URL.
	 *
	 * @since 2.3.0
	 *
	 * @param string $mode Stripe mode (e.g. 'live' or 'test').
	 *
	 * @return string
	 */
	public function get_connect_with_stripe_url( $mode = '' ) {

		$mode = Helpers::validate_stripe_mode( $mode );

		return \add_query_arg(
			array(
				'action'    => 'init',
				'live_mode' => \absint( 'live' === $mode ),
				'state'     => $this->generate_random_token(),
				'site_url'  => \rawurlencode( \admin_url( 'admin.php?page=wpforms-settings&view=payments' ) ),
			),
			self::WPFORMS_URL . '/oauth/stripe-connect'
		);
	}
}
